import{_ as a,o as e,c as l,Q as i}from"./chunks/framework.10dabb5d.js";const m=JSON.parse('{"title":"QA","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"QA/qa.md","filePath":"QA/qa.md"}'),r={name:"QA/qa.md"},t=i('<h1 id="qa" tabindex="-1">QA <a class="header-anchor" href="#qa" aria-label="Permalink to &quot;QA&quot;">​</a></h1><h3 id="关于页面样式-字体-字号-等相关样式问题" tabindex="-1">关于页面样式，字体，字号，等相关样式问题 <a class="header-anchor" href="#关于页面样式-字体-字号-等相关样式问题" aria-label="Permalink to &quot;关于页面样式，字体，字号，等相关样式问题&quot;">​</a></h3><ul><li>目前已经基于现有的组件提供了css变量，以及js变量在页面中供大家使用</li><li>未来会基于这些变量提供一些基础的样式，以及丰富对应的边距等一些结构变量和样式</li></ul><h3 id="关于页面组件的问题" tabindex="-1">关于页面组件的问题 <a class="header-anchor" href="#关于页面组件的问题" aria-label="Permalink to &quot;关于页面组件的问题&quot;">​</a></h3><h4 id="_1-页面抖动-样式塌陷问题" tabindex="-1">1.页面抖动，样式塌陷问题？ <a class="header-anchor" href="#_1-页面抖动-样式塌陷问题" aria-label="Permalink to &quot;1.页面抖动，样式塌陷问题？&quot;">​</a></h4><ul><li>这里主要是由于在样式改变过程中，针对边框的处理会出现忽视从而引发抖动问题，以及塌陷问题</li></ul><h4 id="_2-组件语义化" tabindex="-1">2.组件语义化？ <a class="header-anchor" href="#_2-组件语义化" aria-label="Permalink to &quot;2.组件语义化？&quot;">​</a></h4><ul><li>由于本组件库是在uView的基础上进行开发的，也会继承一些该库的不直观问题，后续会慢慢迭代掉，争取做到看键知义</li></ul><h4 id="_3-针对页面共有结构问题" tabindex="-1">3.针对页面共有结构问题？ <a class="header-anchor" href="#_3-针对页面共有结构问题" aria-label="Permalink to &quot;3.针对页面共有结构问题？&quot;">​</a></h4><ul><li>目前组件库里面已经提供了一个mrLayout 基础结构组件，该组件提供了一个基础的页面结构</li></ul><h4 id="_4-关于form-service-这个组件" tabindex="-1">4.关于form-service 这个组件？ <a class="header-anchor" href="#_4-关于form-service-这个组件" aria-label="Permalink to &quot;4.关于form-service 这个组件？&quot;">​</a></h4><ul><li>组件最初是想解决如何快速生成一个基础表单问题</li><li>组件解决在前后端联调过程中出现的多处修改（相较于常规写法），频繁滚动页面等可以避免出错的问题。</li><li>form-service 本身只会关注修改配置项问题，并不会改变原有的书写思路，只是做了一个整合</li><li>动态表单问题，由于表单是通过配置生成的，所以在处理动态表单问题上，更多的关注点变成了，动态生成配置项问题了，以及动态修改关联项</li><li>对表单的校验，未来会提供一些常用的正则表达式，来减少大家的工作量（也可以集思广益）</li></ul><h4 id="_5-关于多页面-跨组件之间的通信问题" tabindex="-1">5.关于多页面，跨组件之间的通信问题？ <a class="header-anchor" href="#_5-关于多页面-跨组件之间的通信问题" aria-label="Permalink to &quot;5.关于多页面，跨组件之间的通信问题？&quot;">​</a></h4><ul><li>这里也是vue自身的通信调用方法，可以相互交流一下，以便获得更好的跨组件，跨页面之间的处理方案</li></ul><h3 id="关于工程化-规范问题" tabindex="-1">关于工程化，规范问题 <a class="header-anchor" href="#关于工程化-规范问题" aria-label="Permalink to &quot;关于工程化，规范问题&quot;">​</a></h3><h4 id="_1-工程化" tabindex="-1">1.工程化 <a class="header-anchor" href="#_1-工程化" aria-label="Permalink to &quot;1.工程化&quot;">​</a></h4><ul><li>对于未来的新建项目，我们会在项目建立时做一些lint检查从工程角度来控制大家的书写规范，比如我们可以引入eslint、stylelint、prettier等等lint检查，甚至我们也可以使用git的钩子函数来控制项目的规范化</li></ul><h4 id="_2-规范问题" tabindex="-1">2.规范问题 <a class="header-anchor" href="#_2-规范问题" aria-label="Permalink to &quot;2.规范问题&quot;">​</a></h4><ul><li>通过工程化控制</li><li>自我约束</li><li>code review</li></ul><h3 id="未来规划" tabindex="-1">未来规划 <a class="header-anchor" href="#未来规划" aria-label="Permalink to &quot;未来规划&quot;">​</a></h3><ul><li>提供基础的能力，封装基础方法，比如扫描，地理位置等等（如需原生支持）</li><li>构建组件库的私有仓，为大家提供更便捷的引入</li><li>为了方便沟通，会在文档提供邮件链接，以及定时的沟通交流会</li></ul>',21),o=[t];function h(n,s,d,u,c,_){return e(),l("div",null,o)}const f=a(r,[["render",h]]);export{m as __pageData,f as default};
